; nasm -f elf32 foo_fighter.asm  && ld foo_fighter.o -o foo_fighter -m elf_i386 -e foo -dynamic-linker /lib/ld-linux.so.2 -lc
; Name: Foo Fighter
; Author: Testeur de stylos
; Description: What are these holy shits ?! Give me a password and I will maybe give you a flag ! Don't you trust me ? As they said, There is nothing left to lose !

section .text
    global foo
    extern puts
    extern strlen

foo:
    push ebp
    mov ebp, esp
    cmp dword [ebp+4], 2
    jne .fOO
    mov edi, dword [ebp+0xc]
    test edi, edi
    jz .fOO
    push edi
    call FOO
    call F0o
    .fOO:
        lea edi, [rel F00]
        push edi
        call puts
        call F0o

FOO:
    push ebp
    mov ebp, esp
    mov edi, dword [ebp+0x8]
    test edi, edi
    call f0o
    push edi
    call strlen
    cmp eax, 0x10
    jne .F0O
    movzx eax, byte[edi]
    movzx ebx, byte[edi+2]
    sub ebx, 0x20
    cmp ebx, eax
    jne .F0O
    movzx eax, byte[edi+1]
    movzx ebx, byte[edi+6]
    cmp eax, ebx
    jne .F0O
    sub eax, 0x30
    test eax, eax
    jne .F0O
    movzx ebx, byte[edi+8]
    inc eax
    sub ebx, 0x30
    cmp eax, ebx
    jne .F0O
    movzx ebx, byte[edi+0xc]
    inc eax
    sub ebx, 0x30
    dec ebx
    cmp eax, ebx
    jne .F0O
    movzx eax, byte[edi+4]
    movzx ebx, byte[edi+7]
    sub eax, 0x20
    xor eax, ebx
    test eax, eax
    jne .F0O
    movzx eax, byte[edi+9]
    movzx ebx, byte[edi+10]
    inc eax
    cmp eax, ebx
    jne .F0O
    movzx eax, byte[edi+3]
    cmp eax, 0x5F
    jne .F0O
    movzx eax, byte[edi+4]
    movzx ebx, byte[edi+10]
    inc eax
    dec ebx
    cmp eax, ebx
    jne .F0O
    movzx eax, byte[edi+14]
    mov ebx, 1
    shl ebx, 5
    inc ebx
    cmp eax, ebx
    jne .F0O
    movzx ebx, byte[edi+2]
    push 0x7
    push ebx
    call f0o
    cmp eax, 0x1
    jne .F0O
    movzx ebx, byte[edi+4]
    push 0x6
    push ebx
    call f0o
    cmp eax, 0x1
    jne .F0O
    movzx eax, byte[edi+5]
    movzx ebx, byte[edi+11]
    mov ecx, eax
    xor ecx, ebx
    cmp ecx, 0x1b
    jne .F0O
    mov ecx, eax
    add ecx, ebx
    cmp ecx, 0xa3
    jne .F0O
    sub ebx, eax
    cmp ebx, 5
    jne .F0O
    movzx ebx, byte[edi+13]
    cmp ebx, 0x72
    jne .F0O
    movzx eax, byte[edi+14]
    movzx ebx, byte[edi+15]
    cmp eax, ebx
    jne .F0O
    call f00
    leave
    ret
    .F0O:
        lea edi, [rel FO0]
        push edi
        call puts
        call F0o

f00:
    push ebp
    mov ebp, esp
    xor ebx, ebx
    xor ecx, ecx
    lea esi, [rel fOo]
    .FOo:
        and ecx, 0xf
        movzx eax, byte[esi+ebx]
        movzx edx, byte[edi+ecx]
        xor eax, edx
        mov byte[esi+ebx], al
        inc ebx
        inc ecx
        cmp ebx, 0xd5
        jl .FOo
    push esi
    call puts
    leave
    ret

f0o:
    push ebp
    mov ebp, esp
    xor eax, eax
    mov edx, dword [ebp+0x8]
    mov esi, dword [ebp+0xc]
    mov ecx, edx
    and ecx, 0xf0
    shr ecx, 4
    and edx, 0xf
    cmp ecx, edx
    jne .foO
    cmp ecx, esi
    jne .foO
    inc eax
    .foO:
    leave
    ret

F0o:
    mov eax, 1
    mov ebx, 0x0
    int 0x80

section .data
    F00     db "Mutter! Mutter! Gib mir arg!", 0ah, "./prog <key>", 0ah, 00h
    Foo         db "I have a message for you!", 0ah, 00h
    FO0   db "Nope, wrong password", 0ah, 00h
    fOo   db 0x12, 0x48, 0x12, 0x3c, 0x46, 0x22, 0x55, 0x7c, 0x11, 0x4f, 0x1f, 0x3d, 0x47, 0x1a, 0x4e, 0x54, 0x23, 0x10, 0x6, 0x2a, 0x9, 0x3b, 0x55, 0x35, 0x11, 0x6, 0x6, 0x30, 0x13, 0x52, 0x56, 0x48, 0x23, 0x58, 0x57, 0x3, 0x1e, 0x7f, 0x51, 0x66, 0x50, 0x14, 0x48, 0x37, 0x52, 0x0, 0x53, 0x48, 0x36, 0x57, 0x12, 0x7f, 0x14, 0x2a, 0x44, 0x33, 0x43, 0x9, 0x41, 0x5e, 0x14, 0x18, 0x60, 0x79, 0x6b, 0x71, 0x3, 0x7f, 0x24, 0xe, 0x1, 0x7f, 0x4a, 0x4d, 0x42, 0x7e, 0x6c, 0x1, 0x54, 0x53, 0x32, 0x5c, 0xe, 0x0, 0x8, 0x20, 0x44, 0x19, 0x50, 0x38, 0xe, 0x38, 0x52, 0x15, 0x7e, 0xb, 0x7d, 0x1a, 0xa, 0x55, 0x3d, 0x14, 0x64, 0x1d, 0x72, 0x24, 0x2b, 0x17, 0x70, 0x31, 0x62, 0x62, 0x14, 0x63, 0x2f, 0x7, 0x3e, 0x17, 0x68, 0x73, 0x5, 0xe, 0xc, 0x7f, 0x6, 0x35, 0xd, 0x1a, 0x4, 0x60, 0x2f, 0x7, 0x53, 0x24, 0x7d, 0x2a, 0x58, 0x52, 0x2, 0x29, 0x72, 0x3e, 0x71, 0x79, 0xf, 0x5, 0x1b, 0x23, 0x2f, 0x23, 0x5, 0x19, 0x64, 0x14, 0x4, 0x4, 0x6b, 0x2a, 0x14, 0x5b, 0x35, 0xb, 0x13, 0x6a, 0x5b, 0x1a, 0x65, 0x2f, 0x61, 0x3f, 0x30, 0x61, 0x7f, 0x15, 0x48, 0x5, 0x62, 0xa, 0x29, 0xe, 0x10, 0x1f, 0x68, 0x1e, 0x4, 0xe, 0x1, 0x66, 0x5, 0x47, 0x5c, 0x63, 0xa, 0x5e, 0x27, 0x7, 0x3e, 0x7a, 0x5d, 0x2f, 0xa, 0xc, 0x5d, 0x32, 0x5a, 0x43, 0x11, 0x71, 0x69, 0xe, 0x49, 0x61, 0x41, 0ah

